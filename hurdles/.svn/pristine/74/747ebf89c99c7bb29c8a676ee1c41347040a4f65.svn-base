/**
 *
 */

class Loader {
  container; // loader를 표시할 container
  loaderWrap; // loader를 감싸줄 상위 div

  constructor(container) {
    if (container == null) container = document.body;

    this.loaderWrap = container.querySelector("div.loader-wrap");

    if (this.loaderWrap == null) {
      // loader-wrap 이 없는 경우 container 안에 생성
      this.loaderWrap = document.createElement("div");
      this.loaderWrap.classList.add("loader-wrap", "d-none");
      this.loaderWrap.innerHTML = "<div class='loader'></div>";
      container.appendChild(this.loaderWrap);
    }
  }

  show() {
    this.loaderWrap.classList.remove("d-none");
  }

  hide() {
    this.loaderWrap.classList.add("d-none");
  }
}


/*
    페이징 custom elements

    usage: 

      <page-navi data-url="/user/list?search=<?=$paging['search']?>" data-total="$paging['total_page']" data-current="$paging['current_page']" />

      Javascript 코드 내에서도 append 및 insertAdjacentHTML 등 사용하면 자동으로 Generate 됨. 내부 function들도 모두 사용 가능

  */
class Pagination extends HTMLElement {
  // 정보에 맞게 html 코드 생성
  // Pagination 객체 생성 후 사용하면 비동기 화면에서도 처리 가능
  build(currentPage, maxPage, maxBlock) {
    currentPage = Number(currentPage == 0 ? 1 : currentPage);

    let nextPage = currentPage + 1;
    let prevPage = currentPage - 1; //이전 페이지 가기 - currentPage-1
    nextPage = currentPage + 1; //다음 페이지 이동 - currentPage+1

    //이전페이지가 0이하 일경우 currentPage
    if (prevPage <= 0) {
      prevPage = currentPage;
    }

    //nextPage가 maxPage보다 크면
    if (nextPage >= maxPage) {
      nextPage = maxPage;
    }

    //nextPage가 0일때 1로
    if (maxPage == 0) {
      maxPage = 1;
      nextPage = 1;
    }

    let block = Math.ceil(currentPage / maxBlock); //페이지 블럭 개수 // Math.ceil 주어진 숫자보다 크거나 같은 숫자 중 가장 작은 숫자를 integer 로 반환
    let firstPage = (block - 1) * maxBlock + 1; //생성된 블럭에서 첫번째 페이지
    let lastPage = Math.min(maxPage, block * maxBlock); //생성된 블럭에서 마지막 페이지  //Math.min 주어진 숫자들 중 가장 작은 값을 반환합니다.

    let pagingHtml = `<ul class="pagination">`; // 모달에서 페이지 2자리 넘어갈 경우 넘침 문제 때문에 small 적용 h.kang 21.04.13
    pagingHtml += `<li class="page-item"><button class="page-link" data-page="1">&laquo;</button></li>`; // 첫번째 페이지
    pagingHtml += `<li class="page-item"><button class="page-link" data-page="${prevPage}">&lt;</button></li>`; // 이전 페이지
    for (let i = firstPage; i <= lastPage; i++) {
      // 페이지 개수만큼 표시
      pagingHtml += `<li class="page-item ${
        currentPage == i ? "active" : ""
      }"><button class="page-link" data-page="${i}">${i}</button></li>`;
    }
    pagingHtml += `<li class="page-item"><button class="page-link" data-page="${nextPage}">&gt;</button></li>`; // 다음 페이지
    pagingHtml += `<li class="page-item"><button class="page-link" data-page="${maxPage}">&raquo;</button></li>`; // 마지막 페이지
    pagingHtml += `</ul>`;

    return pagingHtml;
  }

  constructor() {
    super();

    let currentPage = this.getAttribute("current"); // 현재 페이지
    let totalPage = this.getAttribute("total"); // 최대 페이지
    let maxBlock = this.getAttribute("show-max") ?? 10; // 최대로 보여줄 페이징 개수 기본 10
	
	let url = this.getAttribute("url").split("?")[0] + "?"; // 페이징 클릭 시 이동할 URL
	let params = this.getAttribute("url").split("?")[1]
	    .match(/\((.*?)\)/)?.[1] // 괄호 안의 내용을 추출
	    .split(",") || []; // 추출된 내용을 쉼표로 나눔

	params.forEach((param) => {
	    let [key, value] = param.trim().split("="); // 키와 값을 분리
	    value = value?.trim(); // 값의 공백 제거

	    // 조건에 맞는 파라미터만 URL에 추가
	    if (value && value !== "null" && value !== "0") {
	        url += `${key}=${value}&`;
	    }
	});
	
    let html = this.build(currentPage, totalPage, maxBlock);

    this.insertAdjacentHTML("beforeend", html);

    this.addEventListener("click", (e) => {
      e.preventDefault();
      e.stopImmediatePropagation();

      if (e.target.closest(".page-link")) {
		// console.log(`${url}&pageNo=${e.target.dataset.page}`);
        location.href = `${url}pageNo=${e.target.dataset.page}`;
      }
    });
  }
}

customElements.define("page-navi", Pagination); // page-navi 으로 교체

/**
 * 무한 스크롤 구현 (옵저버를 활용해 구현)
 * url="" => 내가 비동기로 호출 할 URL 정보를 추가한다
 * data-query="" => 쿼리 정보를 넣어준다
 * 
 * infinite-scroll 
 *    => template 
 *    => 내부에 UI를 넣어주면 해당 형식으로 데이터 회수만큼 반복해서 보여준다
 * 
 * 
 * 내가 데이터를 넣고 싶은 부분에 {{title}} 형식으로 작성하면 사용이 가능하다
 * 
 *  ------------ 사용 예시
    <infinite-scroll 
      url="/servletStudty/board/list2"
      total="${paging.getTotalRecordCount()}"
      last-page="${paging.getLastPageNo()}"
      data-search="${pagingOption['search']}"
      class="block max-w-3xl mx-auto">
      <template>
        <li>
            <div>{{index}}</div>		   	  
            <div><a href="detail?no={{boardNo}}">{{boardTitle}}</a></div>
            <p>{{boardContent}}</p>
            </li>
      </template>
    </infinite-scroll>
  * 
 */

class InfiniteScroll extends HTMLElement {
  #index;

  // 비동기 데이터 가져오기
  async fetchData(url, params) {
    try {
      let query = new URLSearchParams(params).toString();
	  
      let response = await fetch(`${url}?${query}`);
      if (!response.ok) throw new Error("Failed to fetch data");
	  
      return await response.json(); // JSON 형태로 응답 처리
    } catch (error) {
      console.error("Error fetching data:", error);
      return null;
    }
  }

  // 데이터를 기반으로 HTML을 생성
  populateTemplate(template, data) {
    let content = template.content.children[0].cloneNode(true);
    let html = content.innerHTML;

    if (html == null) {
      throw new Error("template 내부에 DOM 정보를 추가해주세요.");
    }

    // 데이터 바인딩 ({{key}} 형식)
    data.index = this.#index--;
    for (const [key, value] of Object.entries(data)) {
      html = html.replace(`{{${key}}}`, value);
    }

    content.innerHTML = html;
    return content;
  }

  // 데이터를 가져와서 리스트에 추가
  async build() {
    // 현재 페이지와 요청 URL 읽기
    let url = this.getAttribute("url");
    let currentPage = Number(this.getAttribute("data-page-no") || 1);
	let query = "";
	let search = document.querySelector("infinite-scroll").dataset.search;
	search = search.substring(search.indexOf("(") + 1, search.indexOf(")")).split(",");
	search.forEach((item) => {
		let [key, value] = item.trim().split("=");

		if (value != "" && value != "null" && value != 0) {
			query += `${key}=${value}&`
		}
	})
	
	query += `pageNo=${currentPage}`;
	console.log(query);
	
    // 데이터 가져오기
    let data = await this.fetchData(
      url, query      
    );

    if (!data || !data.items || data.items.length === 0) {
      console.log("더 이상 로드할 데이터가 없습니다");
      return;
    }

    // 템플릿 가져오기
    let template = this.querySelector("template");
    if (!template) {
		console.log("template이 있어야 실행이 가능합니다");
      throw new Error("Template not found in <infinite-scroll>");
    }

    // 데이터 바인딩 및 DOM 추가
    for (const item of data.items) {
      template.parentElement.appendChild(this.populateTemplate(template, item));
    }

    // 페이지 증가
    this.setAttribute("data-page-no", currentPage + 1);
  }

  // 생성자
  constructor() {
    super();

    let totalPage = this.getAttribute("total"); // 최대 페이지
    this.#index = totalPage; // 생성자에서 초기값 설정

    let intersectionObserver = new IntersectionObserver((entries) => {
      // 마지막인 경우 더이상 페이지 부르지 않게 설정
      let currentPage = Number(this.getAttribute("data-page-no") || 1);
      let lastPage = this.getAttribute("last-page");

      if (currentPage > lastPage) {
		console.log("마지막 데이터 가져온");
        intersectionObserver.disconnect();
        return;
      }

      if (entries[0].intersectionRatio > 0) {
        this.build();
      }
    });

	const footerDiv = document.createElement("div");
	footerDiv.classList.add("scrollerFooter");
	this.parentElement.appendChild(footerDiv);
		
    intersectionObserver.observe(document.querySelector(".scrollerFooter"));
  }
}

customElements.define("infinite-scroll", InfiniteScroll);


// 파일 업로드 커스텀 엘리먼츠
class FileUpload extends HTMLElement {
  constructor() {
    super();
    this.maxFiles = parseInt(this.getAttribute("max-files") || "1");
    this.label = this.getAttribute("label") || "Upload Files";
    this.name = this.getAttribute("name") || "";
    this.render();
  }

  render() {
    this.innerHTML = `
      <div class="mb-3">
        <label>${this.label}</label>
        <button type="button" id="addFileBtn" class="btn btn-secondary">추가</button>
      </div>
      <div id="fileInputsContainer"></div>
    `;
    this.addEventListeners();
    // 기본 파일 입력 폼 하나 렌더링
    this.addFileInput(this.querySelector("#fileInputsContainer"));
  }

  addEventListeners() {
    const addFileBtn = this.querySelector("#addFileBtn");
    const fileInputsContainer = this.querySelector("#fileInputsContainer");

    // Handle adding a new file input when "추가" button is clicked
    addFileBtn.addEventListener("click", () => {
      // Check if the current file count has reached the maxFiles limit
      const currentFileCount = this.querySelectorAll("input[type='file']").length;
      if (currentFileCount >= this.maxFiles) {
        alert(`You can only upload up to ${this.maxFiles} file(s).`);
        return;
      }
	  
      this.addFileInput(fileInputsContainer);
    });
  }

  addFileInput(container) {
    // Create a new file input form
    const fileInputDiv = document.createElement("div");
    fileInputDiv.classList.add("mb-3");

    fileInputDiv.innerHTML = `
      <div class="input-group mb-3">
        <label class="input-group-text" for="fileInput">${this.label}</label>
        <input type="file" name="${this.name}" class="form-control">
      </div>
    `;

    // Append the newly created file input form to the container
    container.appendChild(fileInputDiv);

    // Add event listener for the file input change
    const fileInput = fileInputDiv.querySelector("input[type='file']");
    fileInput.addEventListener("change", (event) => {
      this.handleFileChange(event, fileInput);
    });
  }

  handleFileChange(event, fileInput) {
    const files = Array.from(event.target.files);

    // Ensure we don't exceed the max file limit
    const currentFileCount = this.querySelectorAll("input[type='file']").length;
    if (currentFileCount > this.maxFiles) {
      alert(`You can only upload up to ${this.maxFiles} file(s).`);
      return;
    }

    // Add files to the file input value (for form submission)
    // fileInput.setAttribute('value', files.map(file => file.name).join(", "));

    // Reset the file input value after selection
    // fileInput.value = "";
  }
}

customElements.define("file-upload", FileUpload);


function toQueryString(obj) {
  let params = "";

  for (const [key, value] of Object.entries(obj)) {
    if (value !== null && value !== 0 && value !== undefined) {
	  params += `${key}=${value}`;
    }
  }

  return params;
}