package kr.or.ddit.admin.restaurant.controller;

import java.io.IOException;
import java.util.Arrays;
import java.util.List;

import jakarta.servlet.ServletContext;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.MultipartConfig;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import kr.or.ddit.admin.restaurant.service.RestaurantService;
import kr.or.ddit.file.service.FileService;
import kr.or.ddit.util.FileUpload;
import kr.or.ddit.util.RequestToVoMapper;
import kr.or.ddit.vo.FileVo;
import kr.or.ddit.vo.LocalVo;
import kr.or.ddit.vo.RestaurantCodeVo;
import kr.or.ddit.vo.RestaurantVo;

@WebServlet("/admin/restaurantUpdate.do")
@MultipartConfig
public class RestaurantUpdateController extends HttpServlet {
	RestaurantService resService = RestaurantService.getInstance();
	FileService fileService = FileService.getInstance();
	
	@Override
	protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
		RestaurantVo param = RequestToVoMapper.mapRequestToVo(req, RestaurantVo.class);
		
		// 음식 카테고리 불러오기
		List<RestaurantCodeVo> restaurantCodeList = resService.getRestaurantCodeList();
		
		// 지역 불러오기
		List<LocalVo> localList = resService.getLocalList();
		
		// 식당 상세
		RestaurantVo restaurant = resService.detail(param);
		
		// 식당 파일
		List<FileVo> fileList = resService.getFileList(param);
		
		req.setAttribute("resCodeList", restaurantCodeList);
		req.setAttribute("localList", localList);
		req.setAttribute("restaurant", restaurant);
		req.setAttribute("fileList", fileList);
		
		ServletContext ctx = req.getServletContext();
		ctx.getRequestDispatcher("/WEB-INF/view/admin/restaurant/restaurantUpdate.jsp").forward(req, resp);
	}
	
	@Override
	protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
		RestaurantVo updateParam = RequestToVoMapper.mapRequestToVo(req, RestaurantVo.class);
		int currentFileId = updateParam.getFileNo();
		
		int[] removeId = {};
		if (updateParam.getRemoveFileId() != null) {
			removeId = updateParam.getRemoveFileId();
		}
		
		for (int fileId : removeId) {
			// 삭제할 파일에 아이디가 있는 경
			if (currentFileId == fileId) updateParam.setFileNo(0);
		}
				
		// 실제 이미지 추가
		List<FileVo> fileList = FileUpload.fileListWrite(req, "restaurant");
		
		if (!fileList.isEmpty()) {
			// 식당 이미지 추가
			fileService.addFiles(fileList);
			
			// 섬네일 삭제 시 파일 삭제 된 경우 파일 첫번째 파일 넣어주기
			if (updateParam.getFileNo() == 0) {
				updateParam.setFileNo(fileList.get(0).getFileNo());
			}
		}
		
		// 식당 내용 업데이트
		int result = resService.update(updateParam);
		
		if (removeId.length > 0) {
			// 이미지 삭제
			fileService.deleteFiles(removeId);
			
			// 연결된 테이블 삭제 처리
			resService.restrauntFileDelete(removeId);
		}

		if (!fileList.isEmpty()) {
			// 식당 이미지 조인
			resService.restaurantFileInsert(fileList, updateParam.getRestaurantNo());
		}
		
		if (result == 1) {
			resp.sendRedirect(req.getContextPath() + "/admin/restaurantDetail.do?restaurantNo=" + updateParam.getRestaurantNo());
			return;
		} else {
			resp.sendRedirect(req.getContextPath() + "/admin/restrauntUpdate.do?restaurantNo=" + updateParam.getRestaurantNo());
		}
	}
}
